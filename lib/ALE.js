// Generated by CoffeeScript 1.3.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  jQuery(function() {
    var ALE;
    ALE = (function() {

      function ALE(width, height) {
        this.addToLayer = __bind(this.addToLayer, this);

        this.add = __bind(this.add, this);

        this.checkLayer = __bind(this.checkLayer, this);
        ALE.prototype.__instance = this;
        this.stage = new Kinetic.Stage({
          container: "ALE-canvas",
          width: width,
          height: height
        });
        this.layers = [];
        this.checkLayer(0);
        jQuery(this.stage.getDOM()).droppable({
          drop: function(evt, ui) {
            var clone, offset, template, x, y;
            offset = $(this).offset();
            x = ui.offset.left - offset.left;
            y = ui.offset.top - offset.top;
            template = ui.draggable.data("template");
            clone = template.clone();
            clone.getKNode().setPosition(x, y);
            ALE.prototype.instance().add(clone);
            return clone.play(template.getDefaultAnimation());
          }
        });
        ALE.prototype.__instance = this;
      }

      ALE.prototype.checkLayer = function(layer) {
        if (this.layers[layer] == null) {
          this.layers[layer] = new Kinetic.Layer();
          return this.stage.add(this.layers[layer]);
        }
      };

      ALE.prototype.add = function(object, options) {
        options = jQuery.extend({}, {
          draggable: true
        }, options);
        object.getKNode().setDraggable(options["draggable"]);
        return this.addToLayer(object.getLayer(), object.getKNode());
      };

      ALE.prototype.addToLayer = function(layer, object) {
        this.checkLayer(layer);
        return this.layers[layer].add(object);
      };

      return ALE;

    })();
    window.ALE = ALE;
    return ALE.prototype.instance = function() {
      if (ALE.prototype.__instance == null) {
        ALE.prototype.__instance = new ALE(800, 600);
      }
      return ALE.prototype.__instance;
    };
  });

}).call(this);
