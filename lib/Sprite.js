// Generated by CoffeeScript 1.3.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  YUI().use("node", "event", function(Y) {
    return ALE.Sprite = (function(_super) {

      __extends(Sprite, _super);

      /*
      		#	Mandatory arguments:
      		#		* x
      		#		* y
      		#	Optional pair of arguments:
      		#		* rows
      		#		* columns
      		#	Or
      		#		* width
      		#		* height
      */


      function Sprite(src, options) {
        this.play = __bind(this.play, this);

        this.add = __bind(this.add, this);

        this.getKNode = __bind(this.getKNode, this);

        this.load = __bind(this.load, this);

        var _this = this;
        options = Y.merge({
          layer: 1
        }, options);
        this.kLayer = options.layer;
        this.animations = {};
        this.currentAnimation = "";
        if (typeof src === "string") {
          this.image = Y.one(new Image());
          this.image.set("src", src);
        } else if (src instanceof HTMLImageElement) {
          this.image = T.one(src);
        } else {
          this.image = src;
        }
        this.load(function() {
          _this.totalWidth = _this.image.get("width");
          _this.totalHeight = _this.image.get("height");
          if ((options["rows"] != null) && (options["columns"] != null)) {
            _this.width = _this.totalWidth / options["columns"];
            _this.height = _this.totalHeight / options["rows"];
          } else if ((options["width"] != null) && (options["height"] != null)) {
            _this.width = options["width"];
            _this.height = options["height"];
          }
          return _this.kSprite = new Kinetic.Sprite({
            x: options.x,
            y: options.y,
            image: _this.image.getDOMNode(),
            animations: {}
          });
        });
      }

      Sprite.prototype.load = function(func) {
        if (this.image.get("complete")) {
          return func();
        } else {
          return this.image.load(func);
        }
      };

      Sprite.prototype.getLayer = function() {
        return this.kLayer;
      };

      Sprite.prototype.getKNode = function() {
        var _this = this;
        return this.load(function() {
          return _this.kSprite;
        });
      };

      Sprite.prototype.add = function(key, frames, frameRate) {
        var _this = this;
        return this.load(function() {
          var array, frame, _i, _len;
          if (frameRate == null) {
            frameRate = 6;
          }
          if ((_this.width != null) && (_this.height != null)) {
            array = [];
            for (_i = 0, _len = frames.length; _i < _len; _i++) {
              frame = frames[_i];
              array.push({
                x: frame * _this.width % _this.totalWidth,
                y: Math.floor(frame * _this.width / _this.totalWidth) * _this.height,
                width: _this.width,
                height: _this.height
              });
            }
          } else {
            array = frames;
          }
          _this.animations[key] = {
            frames: array,
            frameRate: frameRate
          };
          return _this.kSprite.getAnimations()[key] = array;
        });
      };

      Sprite.prototype.play = function(key) {
        var _this = this;
        return this.load(function() {
          _this.kSprite.stop();
          _this.kSprite.frameRate = _this.animations[key].frameRate;
          _this.kSprite.setAnimation(key);
          return _this.kSprite.start();
        });
      };

      return Sprite;

    })(Node);
  });

}).call(this);
