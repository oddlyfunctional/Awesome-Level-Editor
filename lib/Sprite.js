// Generated by CoffeeScript 1.3.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  jQuery(function() {
    return ALE.Sprite = (function() {

      function Sprite(src, x, y, width, height, layer) {
        this.play = __bind(this.play, this);

        this.add = __bind(this.add, this);

        this.runAfterLoad = __bind(this.runAfterLoad, this);

        var _this = this;
        if (layer == null) {
          layer = 0;
        }
        this.layer = layer;
        this.width = width;
        this.height = height;
        this.animations = {};
        this.currentAnimation = "";
        this.image = jQuery(new Image());
        this.image.load(function() {
          _this.totalWidth = _this.image[0].width;
          _this.sprite = new Kinetic.Sprite({
            x: x,
            y: y,
            image: _this.image[0],
            animations: {}
          });
          return ALE.prototype.instance().addToLayer(_this.layer, _this.sprite);
        });
        this.image.attr("src", src);
      }

      Sprite.prototype.runAfterLoad = function(func) {
        if (this.image[0].complete) {
          return func();
        } else {
          return this.image.load(func);
        }
      };

      Sprite.prototype.add = function(key, frames, frameRate) {
        var _this = this;
        return this.runAfterLoad(function() {
          var array, frame, _i, _len;
          if (frameRate == null) {
            frameRate = 6;
          }
          array = [];
          for (_i = 0, _len = frames.length; _i < _len; _i++) {
            frame = frames[_i];
            array.push({
              x: frame * _this.width % _this.totalWidth,
              y: Math.floor(frame * _this.width / _this.totalWidth) * _this.height,
              width: _this.width,
              height: _this.height
            });
          }
          _this.animations[key] = {
            frames: array,
            frameRate: frameRate
          };
          return _this.sprite.getAnimations()[key] = array;
        });
      };

      Sprite.prototype.play = function(key) {
        var _this = this;
        return this.runAfterLoad(function() {
          _this.sprite.stop();
          _this.sprite.frameRate = _this.animations[key].frameRate;
          _this.sprite.setAnimation(key);
          return _this.sprite.start();
        });
      };

      return Sprite;

    })();
  });

}).call(this);
